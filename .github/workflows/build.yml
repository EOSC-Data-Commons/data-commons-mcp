name: Build
on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  # pull_request:

jobs:
  test:
    name: ‚úÖ Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup update
      - run: cargo install cargo-deny
      - run: cargo fmt -- --check
      - run: cargo clippy --all --all-targets --all-features
      - run: cargo deny check
      # - run: cargo build --release
      # - run: cargo test
      #   env:
      #     MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}

  docker-build:
    name: üê≥ Build Docker ${{ matrix.platform }}
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     include:
    #       - platform: linux/amd64
    #         runner: ubuntu-latest
    #       - platform: linux/arm64
    #         runner: ubuntu-24.04-arm
    # runs-on: ${{ matrix.runner }}
    # needs: test
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.meta.outputs.json }}
    steps:
      - uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/eosc-data-commons/data-commons-mcp
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          # platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # outputs: type=image,name=ghcr.io/eosc-data-commons/data-commons-mcp,push-by-digest=true,name-canonical=true,push=true

  # docker-merge:
  #   name: üê≥ Merge Docker manifests
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ghcr.io/eosc-data-commons/data-commons-mcp
  #         tags: |
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=raw,value=latest,enable={{is_default_branch}}

  #     - name: Create manifest list and push
  #       working-directory: /tmp
  #       run: |
  #         docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
  #           $(printf 'ghcr.io/eosc-data-commons/data-commons-mcp@%s ' "${{ needs.docker-build.outputs.image-digest }}")
  #       env:
  #         DOCKER_METADATA_OUTPUT_JSON: ${{ needs.docker-build.outputs.image-metadata }}


  build_binaries:
    name: üì¶Ô∏è Build binaries for ${{ matrix.os }} (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - os: linux
            target: aarch64-unknown-linux-gnu
            runner: ubuntu-24.04-arm64
          - os: macos
            target: x86_64-apple-darwin
            runner: macos-latest
          - os: macos
            target: aarch64-apple-darwin
            runner: macos-latest
          - os: windows
            target: x86_64-pc-windows-msvc
            runner: windows-latest
          - os: windows
            target: aarch64-pc-windows-msvc
            runner: windows-latest

    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Add cross-compilation target
        run: rustup update && rustup target add ${{ matrix.target }}

      - name: Install dependencies
        if: matrix.os == 'linux'
        run: sudo apt update && sudo apt install -y pkg-config libssl-dev

      - uses: Swatinem/rust-cache@v2

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        # env:
        #   CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: data-commons-mcp_${{ matrix.target }}
          path: target/${{ matrix.target }}/release/data-commons-mcp${{ matrix.os == 'windows' && '.exe' || '' }}

      - if: startsWith(github.ref, 'refs/tags/')
        name: Prepare for release
        run: |
          mv target/${{ matrix.target }}/release/data-commons-mcp${{ matrix.os == 'windows' && '.exe' || '' }} data-commons-mcp_${{ matrix.target }}${{ matrix.os == 'windows' && '.exe' || '' }}

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            data-commons-mcp_${{ matrix.target }}${{ matrix.os == 'windows' && '.exe' || '' }}

  generate-changelog:
    name: üèîÔ∏è Generate changelog for the GitHub release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Release
        uses: softprops/action-gh-release@v2.2.1
        with:
          body_path: CHANGES.md
